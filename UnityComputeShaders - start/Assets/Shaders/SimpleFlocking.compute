#pragma kernel CSMain

#define GROUP_SIZE 256

struct Boid
{
    float3 position;
    float3 direction;
};

RWStructuredBuffer<Boid> boidsBuffer;

float deltaTime;
float boidSpeed;
float3 flockPosition;
float neighbourDistance;
int boidsCount;

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Boid boid = boidsBuffer[id.x];

    float3 separation = 0;
    float3 alignment  = 0;
    float3 cohesion   = flockPosition;

    uint nearby = 1;

    for (int i = 0; i < boidsCount; i++)
    {
        if ((uint)i == id.x) continue;

        const Boid other = boidsBuffer[i];
        const float dist = max(distance(boid.position, other.position), 1E-6);
        if (dist >= neighbourDistance) continue;

        nearby++;
        alignment += other.direction;
        cohesion  += other.position;

        const float3 diff = normalize(boid.position - other.position);
        separation       += diff * ((1 / dist) - (1 / neighbourDistance));
    }

    alignment /= nearby;
    cohesion  /= nearby;
    cohesion   = normalize(cohesion - boid.position);

    const float3 direction = normalize(alignment + separation + cohesion);
    boid.direction         = normalize(lerp(direction, boid.direction, 0.96));
    boid.position         += boid.direction * (boidSpeed * deltaTime);

    boidsBuffer[id.x] = boid;
}
