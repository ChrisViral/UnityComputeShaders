// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SolidRed
#pragma kernel SolidYellow
#pragma kernel SplitScreen
#pragma kernel Circle

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> output;
int textureResolution;

[numthreads(8, 8, 1)]
void SolidRed(uint3 id : SV_DispatchThreadID)
{
    output[id.xy] = float4(1, 0, 0, 1);
}

[numthreads(8, 8, 1)]
void SolidYellow(uint3 id : SV_DispatchThreadID)
{
    output[id.xy] = float4(1, 1, 0, 1);
}

[numthreads(8, 8, 1)]
void SplitScreen(uint3 id : SV_DispatchThreadID)
{
    const int halfRes = textureResolution / 2;
    output[id.xy] = float4(step(halfRes, id.x), step(halfRes, id.y), 0, 1);
}

float InCircle(float2 pos, const float2 center, const float radius)
{
    pos -= center;
    const float len = length(pos);
    return step(len, radius);
}

[numthreads(8, 8, 1)]
void Circle(uint3 id : SV_DispatchThreadID)
{
    const int halfRes = textureResolution / 2;
    const float inCircle = InCircle(id.xy, halfRes, halfRes / 4);
    output[id.xy] = float4(inCircle, inCircle, 0, 0);
}
