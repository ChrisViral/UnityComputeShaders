#pragma kernel OrbitingStars

RWStructuredBuffer<float3> buffer;
float time;

float random(const float value, const float seed = 0.546)
{
    return frac(sin(value + seed) * 143758.5453);
}

float3 random3(const float value)
{
    return float3(random(value, 3.9812), random(value, 7.1536), random(value, 5.7241));
}

[numthreads(64,1,1)]
void OrbitingStars(uint3 id : SV_DispatchThreadID)
{
    const float3 sinDirection  = normalize(random3(id.x) - 0.5);
    const float3 perpendicular = normalize(random3(id.x + 7.1393) - 0.5);
    const float3 cosDirection  = normalize(cross(sinDirection, perpendicular));
    const float scaledTime     = (time / 2) + (random(id.x) * 712.131234);
    const float3 position      = (sinDirection * sin(scaledTime)) + (cosDirection * cos(scaledTime));
    buffer[id.x]               = position * 2;
}
