// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> result;
int textureResolution;
bool marble;

#include "noiseSimplex.cginc"

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 pos = (((float3)id) / textureResolution) * 2;
    const float scale = 800;
    float3 colour;
    float noise;

    pos *= scale;

    if (marble)
{
        float d       = perlin(pos.x, pos.y) * scale;
        const float u = pos.x + d;
        const float v = pos.y + d;
        d             = perlin(u, v) * scale;
        noise         = perlin(pos.x + d, pos.y + d);
        colour        = float3(2, 2, 2) * noise
                      - float3(noise * 0.1,
                               (noise * 0.2) - (sin(u / 30) * 0.1),
                               (noise * 0.3) + (sin(v / 40) * 0.2));
        colour *= 0.6;
    }
    else
    {
        noise  = perlin(pos.x, pos.y);
        colour = float3(1, 1, 1) * noise;
    }

    result[id.xy] = float4(colour, 1);
}
