// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HorizontalPass
#pragma kernel Highlight

shared Texture2D<float4> source;
shared RWTexture2D<float4> horizontalPass;
RWTexture2D<float4> output;
int2 textureResolution;
float radius;
float edge;
float shade;
float4 center;
int blurRadius;

float circle(const float2 pos, const float2 center, const float radius, const float edge)
{
    const float len = length(pos - center);
    return 1 - smoothstep(radius - edge, radius, len);
}

[numthreads(8, 8, 1)]
void HorizontalPass(uint3 id : SV_DispatchThreadID)
{
    uint2 size;
    source.GetDimensions(size.x, size.y);

    const uint left  = max(0, (int)id.x - blurRadius);
    const uint right = min(size.x - 1, (int)id.x + blurRadius);
    const uint count = right - left + 1;

    uint2 i = uint2(left, id.y);
    float4 colour = 0;
    [unroll(101)]
    for(int x = 0; x < count; x++, i.x++)
    {
        colour += source[i];
    }

    horizontalPass[id.xy] = colour / count;
}

[numthreads(8, 8, 1)]
void Highlight(uint3 id : SV_DispatchThreadID)
{
    uint2 size;
    source.GetDimensions(size.x, size.y);

    const uint bottom = max(0, (int)id.y - blurRadius);
    const uint top    = min(size.y - 1, (int)id.y + blurRadius);
    const uint count  = top - bottom + 1;

    uint2 i = uint2(id.x, bottom);
    float4 colour = 0;
    [unroll(101)]
    for(int y = 0; y < count; y++, i.y++)
    {
        colour += horizontalPass[i];
    }

    colour /= count;

    const float inCircle = circle(id.xy, center.xy, radius, edge);
    output[id.xy] = lerp(colour * shade, source[id.xy], inCircle);
}